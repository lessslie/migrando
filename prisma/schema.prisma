generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================
// ENUMS
// =================================================================

enum UserRole {
  ADMIN
  COMERCIANTE
  FABRICANTE
  PROVEEDOR
  LOGISTICA
}

enum OrderStatus {
  PENDIENTE
  PROCESANDO
  CONFIRMADO
  EN_PRODUCCION 
  LISTO_PARA_ENVIO 
  ENVIADO
  ENTREGADO
  CANCELADO
}

enum ShipmentStatus {
  PENDIENTE
  EN_TRANSITO
  ENTREGADO
  FALLIDO
}

// =================================================================
// 1. ENTIDADES DE USUARIO Y AUTENTICACI√ìN
// =================================================================

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  avatar        String?
  isActive      Boolean        @default(true)
  emailVerified Boolean        @default(false)
  role          UserRole       @default(COMERCIANTE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?      // üëà Soft delete

  comerciante   Comerciante?
  fabricante    Fabricante?
  loginSessions LoginSession[]
  logistica     Logistica?
  notifications Notification[]
  proveedor     Proveedor?

  @@map("users")
  @@index([email])
  @@index([role])
}

model LoginSession {
  id           String    @id @default(cuid())
  userId       String
  token        String    @unique
  refreshToken String    @unique
  expiresAt    DateTime
  lastUsedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_sessions")
  @@index([userId])
  @@index([token])
}

model Comerciante {
  id           String          @id @default(cuid())
  userId       String          @unique
  businessName String
  ruc          String          @unique
  address      String
  city         String
  country      String
  website      String?
  logo         String?
  description  String?
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt   DateTime?   // null = activo, fecha = eliminado
  
  favorites    Favorite[]
  inventory    InventoryItem[]
  orders       Order[]

  @@map("comerciantes")
  @@index([ruc])
}

model Fabricante {
  id          String    @id @default(cuid())
  userId      String    @unique
  companyName String
  ruc         String    @unique
  address     String
  city        String
  country     String
  website     String?
  logo        String?
  description String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt   DateTime?   // null = activo, fecha = eliminado

  orders      Order[]
  products    Product[]

  @@map("fabricantes")
  @@index([ruc])
}

model Proveedor {
  id          String     @id @default(cuid())
  userId      String     @unique
  companyName String
  ruc         String     @unique
  address     String
  city        String
  country     String
  website     String?
  logo        String?
  description String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt   DateTime?   // null = activo, fecha = eliminado

  materials   Material[]
  orders      Order[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("proveedores")
  @@index([ruc])
}

model Logistica {
  id          String     @id @default(cuid())
  userId      String     @unique
  companyName String
  ruc         String     @unique
  address     String
  city        String
  country     String
  website     String?
  logo        String?
  description String?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?   // null = activo, fecha = eliminado

  orders      Order[]
  shipments   Shipment[]

  @@map("logistica")
  @@index([ruc])
}

// =================================================================
// 3. ENTIDADES DE CAT√ÅLOGO Y STOCK
// =================================================================

model Product {
  id             String          @id @default(cuid())
  name           String
  description    String
  category       String
  price          Decimal         @default(0)
  currency       String          @default("USD")
  sku            String          @unique
  images         String[]
  stock          Int             @default(0)
  fabricanteId   String
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt       DateTime?       // SOFT DELETE

  favorites      Favorite[]
  inventoryItems InventoryItem[]
  orderItems     OrderItem[]
  fabricante     Fabricante      @relation(fields: [fabricanteId], references: [id], onDelete: Cascade)

  @@map("products")
  @@index([sku])
  @@index([fabricanteId])
  @@index([category])
  @@index([isActive])
}

model Material {
  id          String      @id @default(cuid())
  name        String
  description String
  category    String
  unit        String
  price       Decimal     @default(0)
  currency    String      @default("USD")
  stock       Int         @default(0)
  proveedorId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt       DateTime?       // SOFT DELETE
  proveedor   Proveedor   @relation(fields: [proveedorId], references: [id], onDelete: Cascade)

  orderItems  OrderItem[]

  @@map("materials")
  @@index([proveedorId])
  @@index([category])
}

model Favorite {
  id            String      @id @default(cuid())
  comercianteId String
  productId     String
  createdAt     DateTime    @default(now())
  comerciante   Comerciante @relation(fields: [comercianteId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([comercianteId, productId])
  @@map("favorites")
  @@index([comercianteId])
  @@index([productId])
}

model InventoryItem {
  id            String      @id @default(cuid())
  productId     String
  comercianteId String
  quantity      Int         @default(0)
  location      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  comerciante   Comerciante @relation(fields: [comercianteId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([comercianteId, productId])
  @@map("inventory_items")
  @@index([comercianteId])
  @@index([productId])
}

// =================================================================
// 4. ENTIDADES DE √ìRDENES Y TRANSACCI√ìN
// =================================================================

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  status        OrderStatus @default(PENDIENTE)
  totalAmount   Decimal     @default(0)
  currency      String      @default("USD")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?       // SOFT DELETE
  comercianteId String
  fabricanteId  String?
  proveedorId   String?
  logisticaId   String?

  orderItems    OrderItem[]
  shipments     Shipment[]

  comerciante   Comerciante @relation(fields: [comercianteId], references: [id])
  fabricante    Fabricante? @relation(fields: [fabricanteId], references: [id])
  logistica     Logistica?  @relation(fields: [logisticaId], references: [id])
  proveedor     Proveedor?  @relation(fields: [proveedorId], references: [id])

  @@map("orders")
  @@index([orderNumber])
  @@index([comercianteId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id         String    @id @default(cuid())
  orderId    String
  productId  String?
  materialId String?
  quantity   Int       @default(1)
  unitPrice  Decimal   @default(0)
  totalPrice Decimal   @default(0)
  material   Material? @relation(fields: [materialId], references: [id])
  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product?  @relation(fields: [productId], references: [id])

  @@map("order_items")
  @@index([orderId])
  @@index([productId])
  @@index([materialId])
}

// =================================================================
// 7. ENTIDADES DE LOG√çSTICA (Log√≠stica)
// =================================================================

model Shipment {
  id             String         @id @default(cuid())
  orderId        String
  logisticaId    String
  status         ShipmentStatus @default(PENDIENTE)
  trackingNumber String?        @unique
  deliveryDate   DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  logistica      Logistica      @relation(fields: [logisticaId], references: [id])
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipments")
  @@index([orderId])
  @@index([logisticaId])
  @@index([status])
  @@index([trackingNumber])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([userId])
  @@index([read])
}

